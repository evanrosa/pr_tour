services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka_producer:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: kafka_producer
    volumes:
      - ./scripts:/scripts
    depends_on:
      - kafka
    env_file:
      - .env
    command: python /scripts/kafka_producer.py

  topic_creator:
    image: python:3.10
    container_name: topic_creator
    volumes:
      - ./scripts:/app/scripts
      - ./scripts/topics_config.json:/app/topics_config.json
    command: python /app/scripts/create_topics.py
    depends_on:
      - kafka

  spark:
    build:
      context: .
      dockerfile: docker/spark/Dockerfile
    container_name: spark
    environment:
      - SPARK_MODE=master
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags

  flink-jobmanager:
    build:
      context: .
      dockerfile: docker/flink/Dockerfile
    container_name: flink-jobmanager
    volumes:
      - ./scripts:/scripts
    ports:
      - "8081:8081" # Flink UI
      - "6123:6123" # RPC Port
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    env_file:
      - .env
    command: jobmanager

  flink-taskmanager:
    build:
      context: .
      dockerfile: docker/flink/Dockerfile
    container_name: flink-taskmanager
    depends_on:
      - flink-jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    command: taskmanager

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./script/bash/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
  airflow:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    container_name: airflow
    env_file: .env
    depends_on:
      - postgres
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/pr_tour_airflow
      - JAVA_HOME=/usr/lib/jvm/java-17-openjdk-arm64
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
    ports:
      - "8082:8082"
    command: >
      bash -c "airflow db upgrade &&
               airflow scheduler &
               airflow webserver -p 8082 --host 0.0.0.0"

  superset:
    build:
      context: .
      dockerfile: docker/superset/Dockerfile
    container_name: superset
    restart: always
    depends_on:
      - postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB_SUPERSET=${POSTGRES_DB_SUPERSET}
      - SUPERSET=${SUPERSET}
      - SUPERSET_CONFIG_PATH=/etc/superset/superset_config.py
    volumes:
      - ./superset/superset_config.py:/etc/superset/superset_config.py
    ports:
      - "8088:8088"
    command: >
      /bin/sh -c "
      superset db upgrade &&
      superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin &&
      superset init &&
      superset run -p 8088 --host 0.0.0.0 --with-threads --reload --debugger"
volumes:
  postgres_data:

